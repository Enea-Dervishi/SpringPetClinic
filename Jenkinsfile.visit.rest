pipeline {
    agent any

    options {
        timestamps()
    }

    parameters {
        string(name: 'VISIT_DATE', defaultValue: '', description: 'Visit date (YYYY-MM-DD)')
        text(name: 'VISIT_DESCRIPTION', description: 'Description of the visit')
        choice(
            name: 'OWNER_PET_SELECTION',
            choices: ['NONE - First run will populate the list'],
            description: 'Select Owner and Pet'
        )
        choice(
            name: 'VET_SELECTION',
            choices: ['NONE - First run will populate the list'],
            description: 'Select Veterinarian'
        )
    }

    environment {
        API_PORT = '9966'
        API_BASE_URL = "http://localhost:${API_PORT}/petclinic"
    }

    stages {
        stage('Update Choices') {
            when {
                expression { 
                    return params.OWNER_PET_SELECTION == 'NONE - First run will populate the list' ||
                           params.VET_SELECTION == 'NONE - First run will populate the list'
                }
            }
            steps {
                script {
                    // Fetch owners and their pets
                    def ownersResponse = sh(
                        script: """
                            curl -s "${API_BASE_URL}/api/owners"
                        """,
                        returnStdout: true
                    ).trim()
                    
                    def ownerPetChoices = []
                    def owners = readJSON text: ownersResponse
                    
                    owners.each { owner ->
                        owner.pets.each { pet ->
                            ownerPetChoices.add("${owner.id}:${pet.id} - ${owner.firstName} ${owner.lastName} - ${pet.name}")
                        }
                    }
                    
                    // Fetch vets
                    def vetsResponse = sh(
                        script: """
                            curl -s "${API_BASE_URL}/api/vets"
                        """,
                        returnStdout: true
                    ).trim()
                    
                    def vetChoices = []
                    def vets = readJSON text: vetsResponse
                    
                    vets.each { vet ->
                        def specialties = vet.specialties.collect { it.name }.join(', ')
                        specialties = specialties ?: 'none'
                        vetChoices.add("${vet.id} - ${vet.firstName} ${vet.lastName} - ${specialties}")
                    }

                    // Make sure we have at least one choice
                    if (ownerPetChoices.isEmpty()) {
                        ownerPetChoices.add("No owners with pets found")
                    }
                    if (vetChoices.isEmpty()) {
                        vetChoices.add("No veterinarians found")
                    }

                    // Update the job parameters
                    properties([
                        parameters([
                            string(name: 'VISIT_DATE', defaultValue: '', description: 'Visit date (YYYY-MM-DD)'),
                            text(name: 'VISIT_DESCRIPTION', description: 'Description of the visit'),
                            choice(name: 'OWNER_PET_SELECTION', choices: ownerPetChoices, description: 'Select Owner and Pet'),
                            choice(name: 'VET_SELECTION', choices: vetChoices, description: 'Select Veterinarian')
                        ])
                    ])

                    error "Choices updated. Please run the pipeline again to schedule a visit."
                }
            }
        }

        stage('Validate Input') {
            steps {
                script {
                    // Visit date validation
                    if (!params.VISIT_DATE?.trim()) {
                        error 'Visit date cannot be empty'
                    }
                    if (!params.VISIT_DATE.matches('^\\d{4}-\\d{2}-\\d{2}$')) {
                        error 'Visit date must be in YYYY-MM-DD format'
                    }

                    // Visit description validation
                    if (!params.VISIT_DESCRIPTION?.trim()) {
                        error 'Visit description cannot be empty'
                    }

                    // Owner/Pet selection validation
                    if (!params.OWNER_PET_SELECTION?.trim() || 
                        params.OWNER_PET_SELECTION.startsWith('NONE') ||
                        params.OWNER_PET_SELECTION == 'No owners with pets found') {
                        error 'Please select an owner and pet'
                    }

                    // Vet selection validation
                    if (!params.VET_SELECTION?.trim() || 
                        params.VET_SELECTION.startsWith('NONE') ||
                        params.VET_SELECTION == 'No veterinarians found') {
                        error 'Please select a veterinarian'
                    }
                }
            }
        }

        stage('Check Application Health') {
            steps {
                script {
                    // Check if the application is running and healthy
                    def healthCheck = sh(
                        script: """
                            curl -s -f "${API_BASE_URL}/actuator/health" || echo 'failed'
                        """,
                        returnStdout: true
                    ).trim()

                    if (!healthCheck.contains('"status":"UP"')) {
                        error "PetClinic REST application is not running or not healthy. Please ensure it is deployed first."
                    }
                }
            }
        }

        stage('Schedule Visit') {
            steps {
                script {
                    // Parse selected owner:pet
                    def (ownerId, petId) = params.OWNER_PET_SELECTION.split(':')[0..1]
                    def vetId = params.VET_SELECTION.split(' - ')[0]
                    
                    // Prepare visit data
                    def visitData = groovy.json.JsonOutput.toJson([
                        date: params.VISIT_DATE,
                        description: params.VISIT_DESCRIPTION,
                        petId: petId.toInteger(),
                        vetId: vetId.toInteger()
                    ])
                    
                    // Schedule the visit using REST API
                    def visitResponse = sh(
                        script: """
                            curl -i -s -X POST "${API_BASE_URL}/api/visits" \\
                                -H "Content-Type: application/json" \\
                                -d '${visitData}'
                        """,
                        returnStdout: true
                    ).trim()
                    
                    echo "Visit scheduling response: ${visitResponse}"
                    
                    // Verify the visit was scheduled successfully (201 Created)
                    if (!visitResponse.contains('201 Created')) {
                        error "Failed to schedule the visit"
                    }

                    echo "Successfully scheduled visit for pet ${petId} (owner ${ownerId}) with vet ${vetId}"
                }
            }
        }
    }

    post {
        success {
            echo "Successfully scheduled the visit!"
        }
        failure {
            echo "Failed to schedule the visit. Please check the logs for details."
        }
    }
} 