pipeline {
    agent any

    options {
        timestamps()
    }

    parameters {
        string(name: 'VISIT_DATE', defaultValue: '', description: 'Visit date (YYYY/MM/DD)')
        text(name: 'VISIT_DESCRIPTION', description: 'Description of the visit')
        choice(
            name: 'OWNER_PET_SELECTION',
            choices: ['NONE - First run will populate the list'],
            description: 'Select Owner and Pet'
        )
        choice(
            name: 'VET_SELECTION',
            choices: ['NONE - First run will populate the list'],
            description: 'Select Veterinarian'
        )
    }

    environment {
        NODE_PORT = '30081'
    }

    stages {
        stage('Update Choices') {
            when {
                expression { 
                    return params.OWNER_PET_SELECTION == 'NONE - First run will populate the list' ||
                           params.VET_SELECTION == 'NONE - First run will populate the list'
                }
            }
            steps {
                script {
                    // Fetch owners and pets
                    def ownersResponse = sh(
                        script: """
                            curl -s "http://localhost:${env.NODE_PORT}/api/owners" | tr -d '\\n' | sed 's/},{/}\\n{/g'
                        """,
                        returnStdout: true
                    ).trim()
                    
                    def ownerPetChoices = []
                    
                    // Parse owners response line by line
                    ownersResponse.split('\n').each { line ->
                        def ownerId = (line =~ /"id":(\d+)/)[0][1]
                        def firstName = (line =~ /"firstName":"([^"]+)"/)[0][1]
                        def lastName = (line =~ /"lastName":"([^"]+)"/)[0][1]
                        
                        // Check if pets array exists and is not empty
                        if (line.contains('"pets":[{')) {
                            def petsSection = line.substring(line.indexOf('"pets":[') + 7)
                            petsSection = petsSection.substring(0, petsSection.indexOf(']'))
                            
                            petsSection.split('\\},\\{').each { petJson ->
                                def petId = (petJson =~ /"id":(\d+)/)[0][1]
                                def petName = (petJson =~ /"name":"([^"]+)"/)[0][1]
                                ownerPetChoices.add("${ownerId}:${petId} - ${firstName} ${lastName} - ${petName}")
                            }
                        }
                    }
                    
                    // Fetch vets
                    def vetsResponse = sh(
                        script: """
                            curl -s "http://localhost:${env.NODE_PORT}/api/vets" | tr -d '\\n' | sed 's/},{/}\\n{/g'
                        """,
                        returnStdout: true
                    ).trim()
                    
                    def vetChoices = []
                    
                    // Parse vets response line by line
                    vetsResponse.split('\n').each { line ->
                        def vetId = (line =~ /"id":(\d+)/)[0][1]
                        def firstName = (line =~ /"firstName":"([^"]+)"/)[0][1]
                        def lastName = (line =~ /"lastName":"([^"]+)"/)[0][1]
                        
                        def specialties = []
                        def specialtiesPattern = /"name":"([^"]+)"/
                        def matcher = line =~ specialtiesPattern
                        while (matcher.find()) {
                            specialties.add(matcher.group(1))
                        }
                        
                        vetChoices.add("${vetId} - ${firstName} ${lastName} - ${specialties.join(', ')}")
                    }

                    // Make sure we have at least one choice
                    if (ownerPetChoices.isEmpty()) {
                        ownerPetChoices.add("No owners with pets found")
                    }
                    if (vetChoices.isEmpty()) {
                        vetChoices.add("No veterinarians found")
                    }

                    // Update the job parameters
                    properties([
                        parameters([
                            string(name: 'VISIT_DATE', defaultValue: '', description: 'Visit date (YYYY/MM/DD)'),
                            text(name: 'VISIT_DESCRIPTION', description: 'Description of the visit'),
                            choice(name: 'OWNER_PET_SELECTION', choices: ownerPetChoices, description: 'Select Owner and Pet'),
                            choice(name: 'VET_SELECTION', choices: vetChoices, description: 'Select Veterinarian')
                        ])
                    ])

                    error "Choices updated. Please run the pipeline again to schedule a visit."
                }
            }
        }

        stage('Validate Input') {
            steps {
                script {
                    // Visit date validation
                    if (!params.VISIT_DATE?.trim()) {
                        error 'Visit date cannot be empty'
                    }
                    if (!params.VISIT_DATE.matches('^\\d{4}/\\d{2}/\\d{2}$')) {
                        error 'Visit date must be in YYYY/MM/DD format'
                    }

                    // Visit description validation
                    if (!params.VISIT_DESCRIPTION?.trim()) {
                        error 'Visit description cannot be empty'
                    }

                    // Owner/Pet selection validation
                    if (!params.OWNER_PET_SELECTION?.trim() || 
                        params.OWNER_PET_SELECTION.startsWith('NONE') ||
                        params.OWNER_PET_SELECTION == 'No owners with pets found') {
                        error 'Please select an owner and pet'
                    }

                    // Vet selection validation
                    if (!params.VET_SELECTION?.trim() || 
                        params.VET_SELECTION.startsWith('NONE') ||
                        params.VET_SELECTION == 'No veterinarians found') {
                        error 'Please select a veterinarian'
                    }
                }
            }
        }

        stage('Check Application Health') {
            steps {
                script {
                    // Check if the application is running and healthy
                    def healthCheck = sh(
                        script: """
                            curl -s -f "http://localhost:${env.NODE_PORT}/manage/health" || echo 'failed'
                        """,
                        returnStdout: true
                    ).trim()

                    if (!healthCheck.contains('"status":"UP"')) {
                        error "PetClinic application is not running or not healthy. Please ensure it is deployed first."
                    }
                }
            }
        }

        stage('Schedule Visit') {
            steps {
                script {
                    // Parse selected owner:pet
                    def (ownerId, petId) = params.OWNER_PET_SELECTION.split(':')[0..1]
                    def vetId = params.VET_SELECTION.split(' - ')[0]
                    
                    // Format date for the API (YYYY-MM-DD)
                    def formattedDate = params.VISIT_DATE.replace('/', '-')
                    
                    // Schedule the visit using form submission
                    def visitResponse = sh(
                        script: """
                            curl -i -s -X POST "http://localhost:${env.NODE_PORT}/owners/${ownerId}/pets/${petId}/visits/new" \\
                                -H "Content-Type: application/x-www-form-urlencoded" \\
                                -d "date=${URLEncoder.encode(formattedDate, 'UTF-8')}" \\
                                -d "description=${URLEncoder.encode(params.VISIT_DESCRIPTION, 'UTF-8')}" \\
                                -d "vetId=${URLEncoder.encode(vetId, 'UTF-8')}"
                        """,
                        returnStdout: true
                    ).trim()
                    
                    echo "Visit scheduling response: ${visitResponse}"
                    
                    // Verify the visit was scheduled successfully
                    if (!visitResponse.contains('302') || !visitResponse.contains("/owners/${ownerId}")) {
                        error "Failed to schedule the visit"
                    }

                    echo "Successfully scheduled visit for pet from owner ${ownerId}"
                }
            }
        }
    }

    post {
        success {
            echo "Successfully scheduled the visit!"
        }
        failure {
            echo "Failed to schedule the visit. Please check the logs for details."
        }
    }
} 